{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4qyq8b/YziP1rfWH5XpCl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KEBLchEiLd-N","executionInfo":{"status":"ok","timestamp":1695964290291,"user_tz":-330,"elapsed":4737,"user":{"displayName":"Danish Monga","userId":"06927296869035345893"}},"outputId":"2e2f0701-f71c-4f2a-c27a-898f6415c0e1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the number of rows: 10\n","Enter the number of columns: 10\n"]}],"source":["# Step 1: Create an array or grid of size defined by the user\n","n = int(input(\"Enter the number of rows: \"))\n","m = int(input(\"Enter the number of columns: \"))\n","grid = [[' ' for _ in range(m)] for _ in range(n)]\n","\n"]},{"cell_type":"code","source":["# Define obstacle locations\n","obstacles = [(2, 2), (5, 3), (4, 10), (0, 13), (2, 15)]\n","\n","# Define robot initial positions\n","robot1_position = (0, 0)\n","robot2_position = (6, 9)\n","\n","# Define pick-up cell locations for each robot\n","robot1_pick_up_cell = (6, 0)\n","robot2_pick_up_cell = (5, 6)\n","\n","# Define delivery cell locations for each robot\n","robot1_delivery_cell = (0, 8)\n","robot2_delivery_cell = (5, 5)\n","\n","\n","\n"],"metadata":{"id":"lmy4H5-OLvvP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to move the robot one cell at a time\n","def move_robot(start, end):\n","    path = []\n","    current_position = start\n","\n","    while current_position != end:\n","        x_diff = end[0] - current_position[0]\n","        y_diff = end[1] - current_position[1]\n","\n","        if x_diff > 0:\n","            next_position = (current_position[0] + 1, current_position[1])\n","        elif x_diff < 0:\n","            next_position = (current_position[0] - 1, current_position[1])\n","        elif y_diff > 0:\n","            next_position = (current_position[0], current_position[1] + 1)\n","        elif y_diff < 0:\n","            next_position = (current_position[0], current_position[1] - 1)\n","\n","        if next_position not in obstacles:\n","            path.append(next_position)\n","            current_position = next_position\n","        else:\n","            break\n","\n","    return path\n","\n"],"metadata":{"id":"sVeTUqTrMr0z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Print the grid with obstacle and location markers\n","for i in range(n):\n","    for j in range(m):\n","        if (i, j) in obstacles:\n","            grid[i][j] = 'X'\n","        elif (i, j) in robots:\n","            grid[i][j] = 'R'\n","        elif (i, j) in pick_up_cells:\n","            grid[i][j] = 'P'\n","        elif (i, j) in delivery_cells:\n","            grid[i][j] = 'D'\n","\n"],"metadata":{"id":"LGDMBQtTO-QO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","# Mark obstacle and location markers on the grid\n","for i in range(n):\n","    for j in range(m):\n","        if (i, j) in obstacles:\n","            grid[i][j] = 'X'\n","        elif (i, j) == robot1_position:\n","            grid[i][j] = 'R1'\n","        elif (i, j) == robot2_position:\n","            grid[i][j] = 'R2'\n","        elif (i, j) == robot1_pick_up_cell:\n","            grid[i][j] = 'P1'\n","        elif (i, j) == robot2_pick_up_cell:\n","            grid[i][j] = 'P2'\n","        elif (i, j) == robot1_delivery_cell:\n","            grid[i][j] = 'D1'\n","        elif (i, j) == robot2_delivery_cell:\n","            grid[i][j] = 'D2'\n","\n","# Move each robot to its corresponding pick-up and delivery points\n","path_to_pick_up_1 = move_robot(robot1_position, robot1_pick_up_cell)\n","path_to_delivery_1 = move_robot(robot1_pick_up_cell, robot1_delivery_cell)\n","\n","path_to_pick_up_2 = move_robot(robot2_position, robot2_pick_up_cell)\n","path_to_delivery_2 = move_robot(robot2_pick_up_cell, robot2_delivery_cell)\n","\n","for position in path_to_pick_up_1 + path_to_delivery_1:\n","    grid[position[0]][position[1]] += '-R1'\n","\n","for position in path_to_pick_up_2 + path_to_delivery_2:\n","    grid[position[0]][position[1]] += '-R2'\n","\n","# Print the final grid\n","for row in grid:\n","    print(' '.join(row))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7TGy4P8tPFJP","executionInfo":{"status":"ok","timestamp":1695947715452,"user_tz":-330,"elapsed":8,"user":{"displayName":"Danish Monga","userId":"06927296869035345893"}},"outputId":"a9a935e5-aa62-498e-bdf5-d57ecc105cc9"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["R1                  \n"," -R1-R1 X                \n","P1-R1   X              \n"," -R1-R1                  \n"," -R1-R1               X  \n"," -R1-R1                 P2-R2\n","D2-R1-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2-R2-R2\n"," -R1-R1  -R1-R1  -R1-R1 X         D1  -R2-R2\n","          X        -R2-R2\n","                   -R2-R2\n"]}]},{"cell_type":"code","source":["V"],"metadata":{"id":"4KLFioUaXG1c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to move the robot one cell at a time and return the path\n","def move_robot(start, end):\n","    path = []\n","    current_position = start\n","\n","    while current_position != end:\n","         x_diff = end[0] - current_position[0]\n","         y_diff = end[1] - current_position[1]\n","\n","         if x_diff > 0:\n","             next_position = (current_position[0] + 1, current_position[1])\n","         elif x_diff < 0:\n","             next_position = (current_position[0] - 1, current_position[1])\n","         elif y_diff > 0:\n","             next_position = (current_position[0], current_position[1] + 1)\n","         elif y_diff < 0:\n","             next_position = (current_position[0], current_position[1] - 1)\n","\n","         if next_position not in obstacles:\n","           path.append(next_position)\n","           current_position = next_position\n","         else:\n","           break\n","\n","    return path\n","\n","# Get the final path for each robot\n","robot1_path = move_robot(robot1_position, robot1_delivery_cell)\n","robot2_path = move_robot(robot2_position, robot2_delivery_cell)\n","\n","# Print the final grid and the final path for each robot\n","for row in grid:\n","   print(' '.join(row))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ttE7C4grWJ8E","executionInfo":{"status":"ok","timestamp":1695947735130,"user_tz":-330,"elapsed":15,"user":{"displayName":"Danish Monga","userId":"06927296869035345893"}},"outputId":"e2ecac5c-fe24-4fb6-ad80-5d4cce7e6fad"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["R1                  \n"," -R1-R1 X                \n","P1-R1   X              \n"," -R1-R1                  \n"," -R1-R1               X  \n"," -R1-R1                 P2-R2\n","D2-R1-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2  -R2-R2-R2-R2\n"," -R1-R1  -R1-R1  -R1-R1 X         D1  -R2-R2\n","          X        -R2-R2\n","                   -R2-R2\n"]}]},{"cell_type":"code","source":["print(\"Robot 1 final path:\", robot1_path)\n","print(\"Robot 2 final path:\", robot2_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ih4bt92QXLnx","executionInfo":{"status":"ok","timestamp":1695947738338,"user_tz":-330,"elapsed":5,"user":{"displayName":"Danish Monga","userId":"06927296869035345893"}},"outputId":"c8ee9d8e-726c-4756-9c07-bdea4691e353"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Robot 1 final path: [(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (7, 1), (7, 2)]\n","Robot 2 final path: [(9, 9), (8, 9), (7, 9), (6, 9), (6, 8), (6, 7), (6, 6), (6, 5), (6, 4), (6, 3), (6, 2), (6, 1), (6, 0)]\n"]}]}]}